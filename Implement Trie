class TrieNode:
    def __init__(self):
        # TrieNode has children and is_end_of_word flag
        self.children = {}
        self.is_end_of_word = False

class Trie:
    def __init__(self):
        # Initialize the trie with a root node
        self.root = TrieNode()

    def insert(self, word):
        # Insert a word into the trie
        current = self.root
        for char in word:
            if char not in current.children:
                # Create a new node for the character if it doesn't exist
                current.children[char] = TrieNode()
            # Move to the next node
            current = current.children[char]
        # Mark the end of the word
        current.is_end_of_word = True

    def search(self, word):
        # Search for a word in the trie
        current = self.root
        for char in word:
            if char not in current.children:
                # If the character is not found, the word is not in the trie
                return False
            # Move to the next node
            current = current.children[char]
        # Check if the word is present in the trie
        return current.is_end_of_word

    def startsWith(self, prefix):
        # Check if there is any word in the trie that starts with the given prefix
        current = self.root
        for char in prefix:
            if char not in current.children:
                # If the character is not found, no word starts with the given prefix
                return False
            # Move to the next node
            current = current.children[char]
        # There is at least one word in the trie that starts with the given prefix
        return True

# Example usage:
trie = Trie()
trie.insert("apple")
print(trie.search("apple"))     # Output: True
print(trie.search("app"))       # Output: False
print(trie.startsWith("app"))   # Output: True
trie.insert("app")
print(trie.search("app"))       # Output: True
The time complexity for each operation (insert, search, startsWith) is O(L), 
where L is the length of the word or prefix.
The space complexity is O(N), where N is the total number of nodes in the trie.

class TrieNode:
    def __init__(self):
        self.children = {}
        self.is_end_of_word = False

def build_trie(words):
    root = TrieNode()
    
    # Build a trie from the given dictionary of words
    for word in words:
        node = root
        for char in word:
            if char not in node.children:
                node.children[char] = TrieNode()
            node = node.children[char]
        node.is_end_of_word = True
    
    return root

def word_break(s, word_dict):
    trie_root = build_trie(word_dict)
    n = len(s)
    
    # Initialize a DP array to store whether the substring s[0:i] can be segmented
    dp = [False] * (n + 1)
    dp[0] = True  # Empty string is always valid
    
    for i in range(1, n + 1):
        node = trie_root
        for j in range(i - 1, -1, -1):
            # Check if the current substring is a valid word in the trie
            if s[j] not in node.children:
                break
            node = node.children[s[j]]
            
            # Check if the substring before j can be segmented and the current node is the end of a valid word
            if node.is_end_of_word and dp[j]:
                dp[i] = True
                break

    return dp[n]

Approach:

Build a trie from the given dictionary of words.
Use dynamic programming (DP) to determine if the input string can be 
segmented into words from the dictionary.
Initialize a DP array dp, where dp[i] represents whether the substring s[0:i] 
can be segmented.
Iterate through the input string, and for each position i, check if any prefix 
ending at position j (where j < i) is a valid word in the trie, and if the substring 
before j can be segmented.
Time Complexity:

Building the trie takes O(m * n), where m is the number of words in the dictionary, 
and n is the average length of the words.
The dynamic programming approach takes O(n^2), where n is the length of the input string.
Space Complexity:

The space complexity is O(m * n) for the trie, where m is the number of words, 
and n is the average length of the words.
The DP array requires O(n) space.
# Example usage:
word_dict = ["apple", "pen"]
input_string = "applepen"
result = word_break(input_string, word_dict)
print(result)
